# Generated by Django 4.1.3 on 2023-01-06 09:02

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import ecommapp.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Brand',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('brand', models.CharField(max_length=255, unique=True)),
                ('about', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Color',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('color', models.CharField(max_length=50, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='KidsAge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('age', models.CharField(max_length=255, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Seller',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('seller', models.CharField(max_length=100, unique=True)),
                ('about_us', models.TextField(blank=True, null=True)),
                ('join_date', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Size',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sizes', models.CharField(choices=[('S', 'S'), ('XS', 'XS'), ('M', 'M'), ('L', 'L'), ('XL', 'XL'), ('2XL', '2XL'), ('3XL', '3XL'), ('4XL', '4XL'), ('Free Size', 'Free Size')], max_length=255)),
                ('price', models.IntegerField()),
                ('mrp', models.IntegerField(default=0)),
                ('discount', models.CharField(blank=True, max_length=100, null=True)),
                ('stock', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Seller_Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Return', models.IntegerField(default=7)),
                ('dlvry_charges', models.CharField(default='FREE', max_length=100)),
                ('upload_date', models.DateTimeField(auto_now_add=True)),
                ('seller', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ecommapp.seller')),
                ('size', models.ManyToManyField(related_name='sizecharts', to='ecommapp.size')),
            ],
        ),
        migrations.CreateModel(
            name='ProductInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Type', models.CharField(max_length=255, verbose_name='Type')),
                ('Material', models.CharField(max_length=255, verbose_name='Material')),
                ('Pattern', models.CharField(max_length=255, verbose_name='Pattern')),
                ('Pocket', models.CharField(blank=True, max_length=255, null=True, verbose_name='Pocket')),
                ('Sleeves', models.CharField(blank=True, max_length=255, null=True, verbose_name='Sleeves')),
                ('Neck', models.CharField(blank=True, max_length=255, null=True, verbose_name='Neck')),
                ('Packet_Contains', models.CharField(max_length=100, null=True, verbose_name='Packet Contains')),
                ('Occasion', models.CharField(max_length=255)),
                ('Rise', models.CharField(blank=True, choices=[('Mid Waist', 'Mid Waist'), ('Low Waist', 'Low Waist'), ('High Waist', 'High Waist')], max_length=50, null=True, verbose_name='Rise')),
                ('Stretchable', models.BooleanField(blank=True, null=True, verbose_name='Stretchable')),
                ('Care_instructions', models.CharField(blank=True, max_length=200, null=True, verbose_name='Care Instructions')),
                ('Descriptions', models.TextField(null=True, verbose_name='Descriptions')),
                ('Country', models.CharField(default='India', max_length=50)),
                ('Manufacture', models.CharField(max_length=1000, null=True)),
                ('Color', models.ManyToManyField(to='ecommapp.color', verbose_name='Color')),
            ],
        ),
        migrations.CreateModel(
            name='AllFashion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(max_length=250, unique=True)),
                ('gender', models.CharField(choices=[('girls', 'girls'), ('boys', 'boys'), ('women', 'women'), ('men', 'men')], max_length=50)),
                ('category', models.CharField(max_length=255)),
                ('card_image', models.ImageField(upload_to=ecommapp.models.user_directory_path)),
                ('title', models.CharField(max_length=100)),
                ('Products', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='pros', to='ecommapp.productinfo')),
                ('Sellers', models.ManyToManyField(related_name='selling_products', to='ecommapp.seller_product')),
                ('age', models.ManyToManyField(blank=True, to='ecommapp.kidsage')),
                ('brand', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='all_brands', to='ecommapp.brand')),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('dob', models.DateField(blank=True, null=True)),
                ('phone_no', models.IntegerField(blank=True, null=True)),
                ('gender', models.CharField(blank=True, max_length=50, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
